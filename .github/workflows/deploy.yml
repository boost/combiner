name: Deployment

on:
  push:
    tags:
      - "*"

jobs:
  ##################################
  # BUILD                          #
  ##################################
  build:
    runs-on: ubuntu-latest
    steps:
      # build the chrome and firefox extension and
      # check their validity with web-ext lint
      - uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm install

      - name: Build Firefox
        run: npm run build:firefox && npm run web-ext:lint:firefox

      - name: Build Chrome
        run: npm run build:chrome  && npm run web-ext:lint:chrome

      - uses: actions/upload-artifact@v1
        with:
          name: build-firefox
          path: build-firefox

      - uses: actions/upload-artifact@v1
        with:
          name: build-chrome
          path: build-chrome

  ##################################
  # CREATE GITHUB RELEASE          #
  ##################################
  create_release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # fetch the build folder
      - uses: actions/download-artifact@v1
        with:
          name: build-firefox
          path: build-firefox

      # fetch the build folder
      - uses: actions/download-artifact@v1
        with:
          name: build-chrome
          path: build-chrome

      # create the release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      # upload the release asset
      - run: cd build-firefox && zip -r ../firefox.xpi *
      - name: Upload firefox.xpi
        id: upload-release-asset-firefox
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./firefox.xpi
          asset_name: firefox.xpi
          asset_content_type: application/zip

      # add the asset to the GitHub release
      - run: zip -r chrome.xpi build-chrome
      - name: Upload chrome.xpi
        id: upload-release-asset-chrome
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./chrome.xpi
          asset_name: chrome.xpi
          asset_content_type: application/zip

  ##################################
  # DEPLOY FIREFOX                 #
  ##################################
  deploy-to-firefox:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # fetch the build folder
      - uses: actions/download-artifact@v1
        with:
          name: build-firefox
          path: build-firefox

      # deploy to firefox with the firefox api
      - run: npm run deploy:firefox
        env:
          WEB_EXT_ID: ${{ secrets.WEB_EXT_ID }}
          WEB_EXT_API_KEY: ${{ secrets.WEB_EXT_API_KEY }}
          WEB_EXT_API_SECRET: ${{ secrets.WEB_EXT_API_SECRET }}

  ##################################
  # DEPLOY CHROME                 #
  ##################################
  deploy-to-chrome:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # fetch the build folder
      - uses: actions/download-artifact@v1
        with:
          name: build-chrome
          path: build-chrome

      # deploy to the chrome webstore
      - name: Deploy Chrome
        run: npm run deploy:chrome
        env:
          EXTENSION_ID: ${{ secrets.EXTENSION_ID }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
